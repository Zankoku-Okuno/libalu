// DEPS: <limits.h> <stddef.h> <stdint.h> <stdbool.h> "carry_@T.h"

#if CHAR_BITS % 2 == 0 // `CHAR_BITS` is even
// FIXME is this right?
// FIXME I'm not sure if `&`, `>>`, and `<<` are well-defined on unsigned integers
inline
struct wide_@T mulC_@T(@TYPE a, @TYPE b) {
    // FIXME this size calculation may not be right; use some form of `popcount(@MAX)` instead (see INT35-C)
    // base is 1/2 the size of the input type
    @TYPE base = (CHAR_BIT * sizeof(@TYPE) / 2);
    @TYPE lowMask = ((@TYPE)~0) >> base;

    @TYPE a1 = a & lowMask;
    @TYPE a2 = a >> base;

    @TYPE b1 = b & lowMask;
    @TYPE b2 = b >> base;


    @TYPE u = a1 * b1;
    @TYPE u1 = u & lowMask;
    @TYPE u2 = u >> base;

    @TYPE v = a2 * b1;
    @TYPE v2 = v & lowMask;
    @TYPE v3 = v >> base;

    @TYPE w = a1 * b2;
    @TYPE w2 = w & lowMask;
    @TYPE w3 = w >> base;

    @TYPE x = a2 * b2;
    @TYPE x3 = x & lowMask;
    @TYPE x4 = x >> base;


    struct wide_@T r;
    // a*b = (a2*B + a1)(b2*B + b1)
    //     = a2*b2*B^2    + a1*b2*B    + a2*b1*B    + a1*b1
    //     = x*B^2        + w*B        + v*B        + u
    //     = (x4*B+x3)B^2 + (w3*B+w2)B + (v3*B+v2)B + (u2*B+u1)
    //     = (x4)B^3 + (x3+w3+v3)B^2 + (w2+v2+u2)B + (u1)
    
    // FIXME I might need to add with carry
    r.hi = (x4 << base) + (v3 + w3 + x3);
    r.lo = ((u2 + v2 + w2) << base) + u1;

    return r;
}
#else
// FIXME write the bit-by-bit algorithm for multiplication
destroy all humans!
#endif
